# -*- coding: utf-8 -*-
"""PronosticoGananciasPorTiempo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16kymvBcoJUCSg1q3z8-gTZu_562w328V
"""

import pandas as pd
import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns
import statsmodels.formula.api as smf, statsmodels.tsa.api as smt, statsmodels.api as sm
import scipy.stats as scs

data=pd.read_csv("casacambio 4 tms.csv")

data

X=data.iloc[:,3].values
y=data.iloc[:,-1].values

series=pd.DataFrame()

series["semana"]=data["semana"]

series["promedio_ganancias"]=data["ganacia promedio"]

series

sm.graphics.tsa.plot_acf(series.promedio_ganancias.values,lags=12);

series.promedio_ganancias.plot()

from sklearn.metrics import mean_absolute_error

def mean_absolute_percentage_error(y_true,y_pred):
  return np.mean(np.abs((y_true - y_pred)/y_true ))*100

def plot_moving_average(series,window,plot_intervals=False,
                        scale=1.96,plot_anomalies=False):
  '''
  series = dataframe con la serie de tiempo
  window = tamaño de la ventana
  plot_intervals = bandera para mostrar intervalos de confianza
  scale = escala para los intervalos de confianza
  plot_anomalies = bandera para mostrar las anomalias
  '''
  rolling_mean = series.rolling(window=window).mean() ## version de pandas para la media movil
  plt.figure(figsize=(10,4))
  plt.title('Media movil \ntamaño de la ventana ={}'.format(window))
  plt.plot(rolling_mean,'g',label='Tendencia por media movil')

  if plot_intervals:
    mae = mean_absolute_error(series[window:],rolling_mean[window:])
    deviation = np.std(series[window:] - rolling_mean[window:])
    low_ = rolling_mean - (mae+scale*deviation)
    upp_ = rolling_mean + (mae+scale*deviation)
    plt.plot(upp_,'r--',label='Limite inferior/superior')
    plt.plot(low_,'r--')

  if plot_anomalies:
    anom = pd.DataFrame(index=series.index, columns=series.columns)
    anom[series<low_] = series[series<low_]
    anom[series>upp_] = series[series>upp_]
    plt.plot(anom,'ro',markersize=10)

  plt.plot(series[window:],label='Valores reales')
  plt.legend(loc='best')
  plt.xticks(rotation=30)

plot_moving_average(series.promedio_ganancias,4,plot_intervals=True,scale=1)

predicciones=pd.DataFrame()

from statsmodels.tsa.api import ExponentialSmoothing

def suavizado_exponencial(series,alpha):
  es1 = ExponentialSmoothing((series), seasonal_periods=48,
                             trend='add',seasonal='add').fit()
  ## pronostico
  es2 = es1.forecast(len(series)//3)
  print(es2)
  series.plot(kind='line',figsize=(15,7))
  plt.xlabel('Semanas')
  plt.ylabel('Ganancias')
  plt.title("Ganancia promedio por semana")
  es2.plot(kind='line')

suavizado_exponencial(series.promedio_ganancias,0.3)

## Holt-Winters
from statsmodels.tsa.holtwinters import ExponentialSmoothing

def plot_hw_smoothing(series,n=20):
  hw = ExponentialSmoothing((series), seasonal_periods=12).fit()
  ## prediccion
  train, test = series[:-n], series[len(series)-n-1:]
  hw_pred = hw.predict(start=test.index[0], end=test.index[-1])
  plt.figure(figsize=(15,7))
  plt.plot(train.index,train, label='Entrenamiento')
  plt.plot(test.index,test, label='Prueba')
  plt.plot(hw_pred.index,hw_pred,label='Holt-Winters')
  plt.legend(loc='best')
  plt.grid(True);

plot_hw_smoothing(series.promedio_ganancias,100)